/* 
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SwaggerOAuthTokenResponseBody : in: body

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwaggerOAuthTokenResponseBody {
  /// The access token issued by the authorization server.
  #[serde(rename = "access_token")]
  access_token: Option<String>,
  /// The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
  #[serde(rename = "expires_in")]
  expires_in: Option<i64>,
  /// To retrieve a refresh token request the id_token scope.
  #[serde(rename = "id_token")]
  id_token: Option<i64>,
  /// The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request.
  #[serde(rename = "refresh_token")]
  refresh_token: Option<String>,
  /// The scope of the access token
  #[serde(rename = "scope")]
  scope: Option<i64>,
  /// The type of the token issued
  #[serde(rename = "token_type")]
  token_type: Option<String>
}

impl SwaggerOAuthTokenResponseBody {
  /// in: body
  pub fn new() -> SwaggerOAuthTokenResponseBody {
    SwaggerOAuthTokenResponseBody {
      access_token: None,
      expires_in: None,
      id_token: None,
      refresh_token: None,
      scope: None,
      token_type: None
    }
  }

  pub fn set_access_token(&mut self, access_token: String) {
    self.access_token = Some(access_token);
  }

  pub fn with_access_token(mut self, access_token: String) -> SwaggerOAuthTokenResponseBody {
    self.access_token = Some(access_token);
    self
  }

  pub fn access_token(&self) -> Option<&String> {
    self.access_token.as_ref()
  }

  pub fn reset_access_token(&mut self) {
    self.access_token = None;
  }

  pub fn set_expires_in(&mut self, expires_in: i64) {
    self.expires_in = Some(expires_in);
  }

  pub fn with_expires_in(mut self, expires_in: i64) -> SwaggerOAuthTokenResponseBody {
    self.expires_in = Some(expires_in);
    self
  }

  pub fn expires_in(&self) -> Option<&i64> {
    self.expires_in.as_ref()
  }

  pub fn reset_expires_in(&mut self) {
    self.expires_in = None;
  }

  pub fn set_id_token(&mut self, id_token: i64) {
    self.id_token = Some(id_token);
  }

  pub fn with_id_token(mut self, id_token: i64) -> SwaggerOAuthTokenResponseBody {
    self.id_token = Some(id_token);
    self
  }

  pub fn id_token(&self) -> Option<&i64> {
    self.id_token.as_ref()
  }

  pub fn reset_id_token(&mut self) {
    self.id_token = None;
  }

  pub fn set_refresh_token(&mut self, refresh_token: String) {
    self.refresh_token = Some(refresh_token);
  }

  pub fn with_refresh_token(mut self, refresh_token: String) -> SwaggerOAuthTokenResponseBody {
    self.refresh_token = Some(refresh_token);
    self
  }

  pub fn refresh_token(&self) -> Option<&String> {
    self.refresh_token.as_ref()
  }

  pub fn reset_refresh_token(&mut self) {
    self.refresh_token = None;
  }

  pub fn set_scope(&mut self, scope: i64) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: i64) -> SwaggerOAuthTokenResponseBody {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&i64> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

  pub fn set_token_type(&mut self, token_type: String) {
    self.token_type = Some(token_type);
  }

  pub fn with_token_type(mut self, token_type: String) -> SwaggerOAuthTokenResponseBody {
    self.token_type = Some(token_type);
    self
  }

  pub fn token_type(&self) -> Option<&String> {
    self.token_type.as_ref()
  }

  pub fn reset_token_type(&mut self) {
    self.token_type = None;
  }

}



