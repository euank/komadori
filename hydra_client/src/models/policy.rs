/* 
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Policy {
  /// Actions impacted by the policy.
  #[serde(rename = "actions")]
  actions: Option<Vec<String>>,
  /// Conditions under which the policy is active.
  #[serde(rename = "conditions")]
  conditions: Option<::std::collections::HashMap<String, ::models::PolicyConditions>>,
  /// Description of the policy.
  #[serde(rename = "description")]
  description: Option<String>,
  /// Effect of the policy
  #[serde(rename = "effect")]
  effect: Option<String>,
  /// ID of the policy.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Resources impacted by the policy.
  #[serde(rename = "resources")]
  resources: Option<Vec<String>>,
  /// Subjects impacted by the policy.
  #[serde(rename = "subjects")]
  subjects: Option<Vec<String>>
}

impl Policy {
  pub fn new() -> Policy {
    Policy {
      actions: None,
      conditions: None,
      description: None,
      effect: None,
      id: None,
      resources: None,
      subjects: None
    }
  }

  pub fn set_actions(&mut self, actions: Vec<String>) {
    self.actions = Some(actions);
  }

  pub fn with_actions(mut self, actions: Vec<String>) -> Policy {
    self.actions = Some(actions);
    self
  }

  pub fn actions(&self) -> Option<&Vec<String>> {
    self.actions.as_ref()
  }

  pub fn reset_actions(&mut self) {
    self.actions = None;
  }

  pub fn set_conditions(&mut self, conditions: ::std::collections::HashMap<String, ::models::PolicyConditions>) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: ::std::collections::HashMap<String, ::models::PolicyConditions>) -> Policy {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&::std::collections::HashMap<String, ::models::PolicyConditions>> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Policy {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_effect(&mut self, effect: String) {
    self.effect = Some(effect);
  }

  pub fn with_effect(mut self, effect: String) -> Policy {
    self.effect = Some(effect);
    self
  }

  pub fn effect(&self) -> Option<&String> {
    self.effect.as_ref()
  }

  pub fn reset_effect(&mut self) {
    self.effect = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Policy {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_resources(&mut self, resources: Vec<String>) {
    self.resources = Some(resources);
  }

  pub fn with_resources(mut self, resources: Vec<String>) -> Policy {
    self.resources = Some(resources);
    self
  }

  pub fn resources(&self) -> Option<&Vec<String>> {
    self.resources.as_ref()
  }

  pub fn reset_resources(&mut self) {
    self.resources = None;
  }

  pub fn set_subjects(&mut self, subjects: Vec<String>) {
    self.subjects = Some(subjects);
  }

  pub fn with_subjects(mut self, subjects: Vec<String>) -> Policy {
    self.subjects = Some(subjects);
    self
  }

  pub fn subjects(&self) -> Option<&Vec<String>> {
    self.subjects.as_ref()
  }

  pub fn reset_subjects(&mut self) {
    self.subjects = None;
  }

}



