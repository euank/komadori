/* 
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConsentRequest {
  /// ClientID is the client id that initiated the OAuth2 request.
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  /// ID is the id of this consent request.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Redirect URL is the URL where the user agent should be redirected to after the consent has been accepted or rejected.
  #[serde(rename = "redirectUrl")]
  redirect_url: Option<String>,
  #[serde(rename = "requestedAcr")]
  requested_acr: Option<Vec<String>>,
  #[serde(rename = "requestedMaxAge")]
  requested_max_age: Option<i64>,
  #[serde(rename = "requestedPrompt")]
  requested_prompt: Option<String>,
  /// RequestedScopes represents a list of scopes that have been requested by the OAuth2 request initiator.
  #[serde(rename = "requestedScopes")]
  requested_scopes: Option<Vec<String>>
}

impl ConsentRequest {
  pub fn new() -> ConsentRequest {
    ConsentRequest {
      client_id: None,
      id: None,
      redirect_url: None,
      requested_acr: None,
      requested_max_age: None,
      requested_prompt: None,
      requested_scopes: None
    }
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> ConsentRequest {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ConsentRequest {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_redirect_url(&mut self, redirect_url: String) {
    self.redirect_url = Some(redirect_url);
  }

  pub fn with_redirect_url(mut self, redirect_url: String) -> ConsentRequest {
    self.redirect_url = Some(redirect_url);
    self
  }

  pub fn redirect_url(&self) -> Option<&String> {
    self.redirect_url.as_ref()
  }

  pub fn reset_redirect_url(&mut self) {
    self.redirect_url = None;
  }

  pub fn set_requested_acr(&mut self, requested_acr: Vec<String>) {
    self.requested_acr = Some(requested_acr);
  }

  pub fn with_requested_acr(mut self, requested_acr: Vec<String>) -> ConsentRequest {
    self.requested_acr = Some(requested_acr);
    self
  }

  pub fn requested_acr(&self) -> Option<&Vec<String>> {
    self.requested_acr.as_ref()
  }

  pub fn reset_requested_acr(&mut self) {
    self.requested_acr = None;
  }

  pub fn set_requested_max_age(&mut self, requested_max_age: i64) {
    self.requested_max_age = Some(requested_max_age);
  }

  pub fn with_requested_max_age(mut self, requested_max_age: i64) -> ConsentRequest {
    self.requested_max_age = Some(requested_max_age);
    self
  }

  pub fn requested_max_age(&self) -> Option<&i64> {
    self.requested_max_age.as_ref()
  }

  pub fn reset_requested_max_age(&mut self) {
    self.requested_max_age = None;
  }

  pub fn set_requested_prompt(&mut self, requested_prompt: String) {
    self.requested_prompt = Some(requested_prompt);
  }

  pub fn with_requested_prompt(mut self, requested_prompt: String) -> ConsentRequest {
    self.requested_prompt = Some(requested_prompt);
    self
  }

  pub fn requested_prompt(&self) -> Option<&String> {
    self.requested_prompt.as_ref()
  }

  pub fn reset_requested_prompt(&mut self) {
    self.requested_prompt = None;
  }

  pub fn set_requested_scopes(&mut self, requested_scopes: Vec<String>) {
    self.requested_scopes = Some(requested_scopes);
  }

  pub fn with_requested_scopes(mut self, requested_scopes: Vec<String>) -> ConsentRequest {
    self.requested_scopes = Some(requested_scopes);
    self
  }

  pub fn requested_scopes(&self) -> Option<&Vec<String>> {
    self.requested_scopes.as_ref()
  }

  pub fn reset_requested_scopes(&mut self) {
    self.requested_scopes = None;
  }

}



