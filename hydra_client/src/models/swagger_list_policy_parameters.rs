/* 
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwaggerListPolicyParameters {
  /// The maximum amount of policies returned. in: query
  #[serde(rename = "limit")]
  limit: Option<i64>,
  /// The offset from where to start looking. in: query
  #[serde(rename = "offset")]
  offset: Option<i64>
}

impl SwaggerListPolicyParameters {
  pub fn new() -> SwaggerListPolicyParameters {
    SwaggerListPolicyParameters {
      limit: None,
      offset: None
    }
  }

  pub fn set_limit(&mut self, limit: i64) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i64) -> SwaggerListPolicyParameters {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i64> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

  pub fn set_offset(&mut self, offset: i64) {
    self.offset = Some(offset);
  }

  pub fn with_offset(mut self, offset: i64) -> SwaggerListPolicyParameters {
    self.offset = Some(offset);
    self
  }

  pub fn offset(&self) -> Option<&i64> {
    self.offset.as_ref()
  }

  pub fn reset_offset(&mut self) {
    self.offset = None;
  }

}



