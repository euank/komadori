/* 
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct JsonWebKey {
  /// The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.
  #[serde(rename = "alg")]
  alg: Option<String>,
  #[serde(rename = "crv")]
  crv: Option<String>,
  #[serde(rename = "d")]
  d: Option<String>,
  #[serde(rename = "dp")]
  dp: Option<String>,
  #[serde(rename = "dq")]
  dq: Option<String>,
  #[serde(rename = "e")]
  e: Option<String>,
  #[serde(rename = "k")]
  k: Option<String>,
  /// The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
  #[serde(rename = "kid")]
  kid: Option<String>,
  /// The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.
  #[serde(rename = "kty")]
  kty: Option<String>,
  #[serde(rename = "n")]
  n: Option<String>,
  #[serde(rename = "p")]
  p: Option<String>,
  #[serde(rename = "q")]
  q: Option<String>,
  #[serde(rename = "qi")]
  qi: Option<String>,
  /// The \"use\" (public key use) parameter identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).
  #[serde(rename = "use")]
  _use: Option<String>,
  #[serde(rename = "x")]
  x: Option<String>,
  /// The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.
  #[serde(rename = "x5c")]
  x5c: Option<Vec<String>>,
  #[serde(rename = "y")]
  y: Option<String>
}

impl JsonWebKey {
  pub fn new() -> JsonWebKey {
    JsonWebKey {
      alg: None,
      crv: None,
      d: None,
      dp: None,
      dq: None,
      e: None,
      k: None,
      kid: None,
      kty: None,
      n: None,
      p: None,
      q: None,
      qi: None,
      _use: None,
      x: None,
      x5c: None,
      y: None
    }
  }

  pub fn set_alg(&mut self, alg: String) {
    self.alg = Some(alg);
  }

  pub fn with_alg(mut self, alg: String) -> JsonWebKey {
    self.alg = Some(alg);
    self
  }

  pub fn alg(&self) -> Option<&String> {
    self.alg.as_ref()
  }

  pub fn reset_alg(&mut self) {
    self.alg = None;
  }

  pub fn set_crv(&mut self, crv: String) {
    self.crv = Some(crv);
  }

  pub fn with_crv(mut self, crv: String) -> JsonWebKey {
    self.crv = Some(crv);
    self
  }

  pub fn crv(&self) -> Option<&String> {
    self.crv.as_ref()
  }

  pub fn reset_crv(&mut self) {
    self.crv = None;
  }

  pub fn set_d(&mut self, d: String) {
    self.d = Some(d);
  }

  pub fn with_d(mut self, d: String) -> JsonWebKey {
    self.d = Some(d);
    self
  }

  pub fn d(&self) -> Option<&String> {
    self.d.as_ref()
  }

  pub fn reset_d(&mut self) {
    self.d = None;
  }

  pub fn set_dp(&mut self, dp: String) {
    self.dp = Some(dp);
  }

  pub fn with_dp(mut self, dp: String) -> JsonWebKey {
    self.dp = Some(dp);
    self
  }

  pub fn dp(&self) -> Option<&String> {
    self.dp.as_ref()
  }

  pub fn reset_dp(&mut self) {
    self.dp = None;
  }

  pub fn set_dq(&mut self, dq: String) {
    self.dq = Some(dq);
  }

  pub fn with_dq(mut self, dq: String) -> JsonWebKey {
    self.dq = Some(dq);
    self
  }

  pub fn dq(&self) -> Option<&String> {
    self.dq.as_ref()
  }

  pub fn reset_dq(&mut self) {
    self.dq = None;
  }

  pub fn set_e(&mut self, e: String) {
    self.e = Some(e);
  }

  pub fn with_e(mut self, e: String) -> JsonWebKey {
    self.e = Some(e);
    self
  }

  pub fn e(&self) -> Option<&String> {
    self.e.as_ref()
  }

  pub fn reset_e(&mut self) {
    self.e = None;
  }

  pub fn set_k(&mut self, k: String) {
    self.k = Some(k);
  }

  pub fn with_k(mut self, k: String) -> JsonWebKey {
    self.k = Some(k);
    self
  }

  pub fn k(&self) -> Option<&String> {
    self.k.as_ref()
  }

  pub fn reset_k(&mut self) {
    self.k = None;
  }

  pub fn set_kid(&mut self, kid: String) {
    self.kid = Some(kid);
  }

  pub fn with_kid(mut self, kid: String) -> JsonWebKey {
    self.kid = Some(kid);
    self
  }

  pub fn kid(&self) -> Option<&String> {
    self.kid.as_ref()
  }

  pub fn reset_kid(&mut self) {
    self.kid = None;
  }

  pub fn set_kty(&mut self, kty: String) {
    self.kty = Some(kty);
  }

  pub fn with_kty(mut self, kty: String) -> JsonWebKey {
    self.kty = Some(kty);
    self
  }

  pub fn kty(&self) -> Option<&String> {
    self.kty.as_ref()
  }

  pub fn reset_kty(&mut self) {
    self.kty = None;
  }

  pub fn set_n(&mut self, n: String) {
    self.n = Some(n);
  }

  pub fn with_n(mut self, n: String) -> JsonWebKey {
    self.n = Some(n);
    self
  }

  pub fn n(&self) -> Option<&String> {
    self.n.as_ref()
  }

  pub fn reset_n(&mut self) {
    self.n = None;
  }

  pub fn set_p(&mut self, p: String) {
    self.p = Some(p);
  }

  pub fn with_p(mut self, p: String) -> JsonWebKey {
    self.p = Some(p);
    self
  }

  pub fn p(&self) -> Option<&String> {
    self.p.as_ref()
  }

  pub fn reset_p(&mut self) {
    self.p = None;
  }

  pub fn set_q(&mut self, q: String) {
    self.q = Some(q);
  }

  pub fn with_q(mut self, q: String) -> JsonWebKey {
    self.q = Some(q);
    self
  }

  pub fn q(&self) -> Option<&String> {
    self.q.as_ref()
  }

  pub fn reset_q(&mut self) {
    self.q = None;
  }

  pub fn set_qi(&mut self, qi: String) {
    self.qi = Some(qi);
  }

  pub fn with_qi(mut self, qi: String) -> JsonWebKey {
    self.qi = Some(qi);
    self
  }

  pub fn qi(&self) -> Option<&String> {
    self.qi.as_ref()
  }

  pub fn reset_qi(&mut self) {
    self.qi = None;
  }

  pub fn set__use(&mut self, _use: String) {
    self._use = Some(_use);
  }

  pub fn with__use(mut self, _use: String) -> JsonWebKey {
    self._use = Some(_use);
    self
  }

  pub fn _use(&self) -> Option<&String> {
    self._use.as_ref()
  }

  pub fn reset__use(&mut self) {
    self._use = None;
  }

  pub fn set_x(&mut self, x: String) {
    self.x = Some(x);
  }

  pub fn with_x(mut self, x: String) -> JsonWebKey {
    self.x = Some(x);
    self
  }

  pub fn x(&self) -> Option<&String> {
    self.x.as_ref()
  }

  pub fn reset_x(&mut self) {
    self.x = None;
  }

  pub fn set_x5c(&mut self, x5c: Vec<String>) {
    self.x5c = Some(x5c);
  }

  pub fn with_x5c(mut self, x5c: Vec<String>) -> JsonWebKey {
    self.x5c = Some(x5c);
    self
  }

  pub fn x5c(&self) -> Option<&Vec<String>> {
    self.x5c.as_ref()
  }

  pub fn reset_x5c(&mut self) {
    self.x5c = None;
  }

  pub fn set_y(&mut self, y: String) {
    self.y = Some(y);
  }

  pub fn with_y(mut self, y: String) -> JsonWebKey {
    self.y = Some(y);
    self
  }

  pub fn y(&self) -> Option<&String> {
    self.y.as_ref()
  }

  pub fn reset_y(&mut self) {
    self.y = None;
  }

}



