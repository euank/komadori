/* 
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/   Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.   The official repository is located at https://github.com/ory/hydra   ### Important REST API Documentation Notes  The swagger generator used to create this documentation does currently not support example responses. To see request and response payloads click on **\"Show JSON schema\"**: ![Enable JSON Schema on Apiary](https://storage.googleapis.com/ory.am/hydra/json-schema.png)   The API documentation always refers to the latest tagged version of ORY Hydra. For previous API documentations, please refer to https://github.com/ory/hydra/blob/<tag-id>/docs/api.swagger.yaml - for example:  0.9.13: https://github.com/ory/hydra/blob/v0.9.13/docs/api.swagger.yaml 0.8.1: https://github.com/ory/hydra/blob/v0.8.1/docs/api.swagger.yaml
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Context : Context contains an access token's session data

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Context {
  /// Extra represents arbitrary session data.
  #[serde(rename = "accessTokenExtra")]
  access_token_extra: Option<::std::collections::HashMap<String, Value>>,
  /// ClientID is id of the client the token was issued for..
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  /// ExpiresAt is the expiry timestamp.
  #[serde(rename = "expiresAt")]
  expires_at: Option<String>,
  /// GrantedScopes is a list of scopes that the subject authorized when asked for consent.
  #[serde(rename = "grantedScopes")]
  granted_scopes: Option<Vec<String>>,
  /// IssuedAt is the token creation time stamp.
  #[serde(rename = "issuedAt")]
  issued_at: Option<String>,
  /// Issuer is the id of the issuer, typically an hydra instance.
  #[serde(rename = "issuer")]
  issuer: Option<String>,
  /// Subject is the identity that authorized issuing the token, for example a user or an OAuth2 app. This is usually a uuid but you can choose a urn or some other id too.
  #[serde(rename = "subject")]
  subject: Option<String>
}

impl Context {
  /// Context contains an access token's session data
  pub fn new() -> Context {
    Context {
      access_token_extra: None,
      client_id: None,
      expires_at: None,
      granted_scopes: None,
      issued_at: None,
      issuer: None,
      subject: None
    }
  }

  pub fn set_access_token_extra(&mut self, access_token_extra: ::std::collections::HashMap<String, Value>) {
    self.access_token_extra = Some(access_token_extra);
  }

  pub fn with_access_token_extra(mut self, access_token_extra: ::std::collections::HashMap<String, Value>) -> Context {
    self.access_token_extra = Some(access_token_extra);
    self
  }

  pub fn access_token_extra(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.access_token_extra.as_ref()
  }

  pub fn reset_access_token_extra(&mut self) {
    self.access_token_extra = None;
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> Context {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_expires_at(&mut self, expires_at: String) {
    self.expires_at = Some(expires_at);
  }

  pub fn with_expires_at(mut self, expires_at: String) -> Context {
    self.expires_at = Some(expires_at);
    self
  }

  pub fn expires_at(&self) -> Option<&String> {
    self.expires_at.as_ref()
  }

  pub fn reset_expires_at(&mut self) {
    self.expires_at = None;
  }

  pub fn set_granted_scopes(&mut self, granted_scopes: Vec<String>) {
    self.granted_scopes = Some(granted_scopes);
  }

  pub fn with_granted_scopes(mut self, granted_scopes: Vec<String>) -> Context {
    self.granted_scopes = Some(granted_scopes);
    self
  }

  pub fn granted_scopes(&self) -> Option<&Vec<String>> {
    self.granted_scopes.as_ref()
  }

  pub fn reset_granted_scopes(&mut self) {
    self.granted_scopes = None;
  }

  pub fn set_issued_at(&mut self, issued_at: String) {
    self.issued_at = Some(issued_at);
  }

  pub fn with_issued_at(mut self, issued_at: String) -> Context {
    self.issued_at = Some(issued_at);
    self
  }

  pub fn issued_at(&self) -> Option<&String> {
    self.issued_at.as_ref()
  }

  pub fn reset_issued_at(&mut self) {
    self.issued_at = None;
  }

  pub fn set_issuer(&mut self, issuer: String) {
    self.issuer = Some(issuer);
  }

  pub fn with_issuer(mut self, issuer: String) -> Context {
    self.issuer = Some(issuer);
    self
  }

  pub fn issuer(&self) -> Option<&String> {
    self.issuer.as_ref()
  }

  pub fn reset_issuer(&mut self) {
    self.issuer = None;
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> Context {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

}



